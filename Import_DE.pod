# ###################################################################################################
# # Script      :  Config::IniFiles::Import                                                         #
# #                -------------------------------------------------------------------------------- #
# # Author      :  Juergen von Brietzke                                                 (c) JvBSoft #
# #                -------------------------------------------------------------------------------- #
# # Version     :  0.900                                                                18.Jun.2003 #
# ###################################################################################################
# #                                              P O D                                              #
# ###################################################################################################

=pod

=head1 NAME

Config::IniFile::Import - Import von MS-Windows-Format-Ini-Dateien auf Variablen

=head1 VERSION

Dieses Dokument beschreibt die Version 0.900 des Moduls Config::IniFiles::Import vom 18.06.2003

=head1 ANWENDUNG

  use Config::IniFiles::Import;
  ...
  $INI = Config::IniFiles::Import -> new( -option => value [ ... ] );
  ...
  $INI -> Import(
                  -loadsection  => [ qw( section1 section2 ...                        ) ],
                  -loadvariable => [ qw( section3::param1+param2 section4::param1 ... ) ],
                  -protocol     => filehandle                                            ,
                  -exportto     => 'Package'
                );

=head1 BESCHREIBUNG

Die Definitionen von INI-Dateien werden mittels des Moduls 'Config::IniFiles' gelesen, und mit dem
vorliegenden Modul auf korrespondierende Variablen importiert.

Dabei werden die Variablen-Namen wie folgt gebildet:

  - Der Sektions-Name wird mit dem Parameter-Namen, getrennt durch Unterstrich verbunden und dem
    Package 'INI' ( Standardfall ) zugeordnet.
  - Es besteht die aber auch Moeglichkeit den Package-Namen frei zu waehlen.

Aus diesem Grunde gelten fuer die Sektions- und Parameter-Namen folgende Einschraenkungen:

  - Diese Bezeichner duerfen nur aus gueltigen Wortzeichen bestehen ( a-z, A-Z, 0-9, _ )
  - Die Gross-/Kleinschreibung wird beachtet und fuehrt zu verschiedenen Variablennamen

=head2 Wertesubstitution mit INI-Datei Eintraegen

Die INI-Dateien koennen durch die Verwendung von Substitutionen flexible gehalten werden. Fuer die
Substitution ist folgende Syntax anzuwenden:

  Parameter = ...{Sektion::Parameter}...

=item B<Substitutions-Beispiel>

  [SEKTION_1]
  Wert1 = bla
  Wert2 = foo{SEKTION_1::Wert1}foo

  Das ergibt fuer Wert2 den Wert 'fooblafoo'.

=head2 Wertesubstitution mit 'predefinierte Variablen'

Fuer die Substitution steht ein Satz von prefinierten Variablen zur Verfuegung, die wie folgt
angesprochen werden koennen:

  Parameter = ...{Variable}...

=head2 Predefinierte Variable

Folgende 'predefinierte Variablen' sind definiert:

=over 7

=item B<FindBin>

=back

Enthaelt den Pfad zum aktuellen Perl-Skript.

=over 7

=item B<UserName>

=back

Enthaelt den Namen des User's, der das aktuelle Skript gestarten hat.
( Wird aus der Umgebungs-Variablen 'ENV{USER}' gewonnen )

=over 7

=item B<TimeShort>

=back

Enthaelt die Uhrzeit des Programmstarts in der Form 'HH:MM'

=over 7

=item B<TimeLong>

=back

Enthaelt die Uhrzeit des Programmstarts in der Form 'HH:MM:SS'

=over 7

=item B<DateShort>

=back

Enthaelt das Datum des Programmstarts in der Form 'TT.MM.JJJJ'

=over 7

=item B<DateLong>

=back

Enthaelt das Datum des Programmstarts in der Form 'TT.MMM.JJJJ'

=over 7

=item B<DateTime>

=back

Enthaelt das Datum und die Uhrzeit des Programmstarts in der Form 'TT.MM.JJJJ - HH:MM'

=item B<Substitutions-Beispiel fuer 'predifinierte Variablen'>

  [SEKTION_2]
  Wert3 = {FindBin}

  Das ergibt fuer Wert3 den Pfad zum aktuellen Perl-Skript.

=head2 Nutzerdefinierte Variablen

Durch die Option '-predef' ist es moeglich, dem Klassenkonstruktor eigene 'predefinierte Variable'
zu uebergeben, oder die bestehenden zu ueberschreiben.

=head1 METHODEN

=head2 new - Klassenkonstruktor

$INI = Config::IniFiles::Import -> new(
                                        -language => language,
                                        -predef   => ...
                                        ...       => ...
                                      );

=over 7

=item B<-language>  -  ( optional )

=back

Syntax:  '-language' => language

Dieser Parameter beeinflusst die Schreibweise des Monatsnamens predefinierten Variablen 'DateLong'
( Standardwert ist 'German ).

language : Alle vom Modul 'Date::Language' unterstuetzen Sprachen.

=over 7

=item B<-predef>  -  ( optional )

=back

Syntax 1:  '-predef' = [ 'DateTime', key, template, language ]

Erstellt Datum- / Zeit-Variable mit dem Namen 'key', der Formatierung 'template' in der Sprache
'language' mittels des Moduls Date::Language.

template : Alle vom Modul 'Date::Language' unterstuetzen Formatierungen.
language : Alle vom Modul 'Date::Language' unterstuetzen Sprachen.

Syntax 2:  '-predef' = [ 'UserValue', key, value ]

Erstellt eine frei definierbare predefinierte Variable mit dem Namen 'key' und Wert 'value'.

Alle weiteren hier uebergebenen Parameterpaare ( Option / Wert ) werden an das Modul
'Config::IniFiles' weitergereicht. Die Beschreibung der Parameter ist dessen Dokumentation zu
entnehmen. Nachfolgend werden jedoch die moeglichen Parameter aufgefuehrt.

=over 7

=item B<-file>

=item B<-allowcontinue>

=item B<-allowedcommentchars>

=item B<-commentchar>

=item B<-default>

=item B<-import>

=item B<-nocase>

=item B<-reloadwarn>

=back

=head2 Import - Importiert die Werte auf Variable

$INI -> Import(
                -loadsection  => [ qw( section1 section2 ...                        ) ],
                -loadvariable => [ qw( section3::param1+param2 section4::param1 ... ) ],
                -protocol     => filehandle                                            ,
                -exportto     => 'Package'
              );

Diese Methode liest die INI-Datei(en) ein und importiert die Daten auf Variable. Die Definition
der Variablen erfolgt in dieser Methode als globale Variable ( use vars qw( ... ) ). Damit
koennen Programme die dieses Modul anwenden, weiter mit dem Pragma 'use strict' arbeiten.

=over 7

=item B<-loadsection>  -  ( optional )

=back

Syntax:  '-loadsection' => [ qw( section1 section2 ... ) ]

Wird diese Option uebergeben, so werden nur die benannten Sektionen importiert. Andernfall erfolgt
der Import aller Sektionen.

=over 7

=item B<-loadvariable>  -  ( optional )

=back

Syntax: '-loadvariable' => [ qw( section1::par1+par2 section2::par ... ) ]

Wird diese Option uebergeben, so werden nur die benannten Variablen der jeweiligen Sektion importiert.

=over 7

=item B<-protocol>  -  ( optional )

=back

Syntax: '-protocol' => filehandle

Wird diese Option uebergeben, so wird der Import der Variablen in der durch den 'filehandle'
uebergebenen Datei protokolliert.

=over 7

=item B<-exportto>

=back

Syntax: '-exportto' => 'Package'

Standardmaessig werden die Variablen in dem Package 'INI' abgelegt. Dies kann mit dieser Option
beim Aufruf der Methode geaendert werden.

=over 7

=item B<Hinweis>

=back

Die Optionen '-loadsection' und '-loadvariable' koennen kombiniert werden.

=head1 BEISPIEL

Das nachfolgende Beispiel liest die INI-Dateien 'Ini1.ini' und 'Ini2.ini' aus dem aktuellen
Verzeichnis ein. Es werden die Angaben der Sektionen 'GLOBAL' und 'VERZEICHNISSE' sowie die
Parameter 'Name' und 'TempDir' der Sektion 'USER' auf die entsprechenden Variablen des Package
'Cfg' des Programms importiert. Weitere eventuell vorhandene Sektionen und Variablen werden
ignoriert.

Die importierten Variablen werden in der Datei 'Load.prt' im aktuellen Verzeichnis protokolliert.

=head2 Datei - Ini1.ini

  [GLOBAL]
  Script        = {FindBin}
  [USER]
  Name          = {UserName}
  TmpDir        = C:\Tmp
  TempDir       = C:\Temp\{UserName}
  [VAR]
  Datum         = {Datum}
  Ort           = {City}

=head2 Datei - Ini2.ini

  [VERZEICHNISSE]
  Daten         = {USER::TempDir}\Daten
  Protokolle    = {USER::TempDir}\Protokoll
  [UPDATE]
  Programme     = D:\Update\Prg
  Dokumentation = D:\Update\Doc

=head2 Programm

  #!/usr/bin/perl
  ###############################################################################
  #
    use Config::IniFiles::Import;
    use File::Spec;
  #
    $FH = FileHandle -> new( File::Spec -> catfile( qw( . Load.prt ) ), 'w' );
  #
    print $FH "Test des Moduls : Config::IniFiles::Import\n";
    print $FH '-' x 100 . "\n\n";
  #
    $INI = Config::IniFiles::Import ->
           new( -predef => [ 'DateTime' , 'Datum', '%B.%Y', 'German' ],
                -predef => [ qw( UserValue City Berlin ) ],
                -file   => File::Spec->catfile( qw( . Ini1.ini ) ),
                -import => Config::IniFiles ->
                           new( -file => File::Spec->catfile( qw( . Ini2.ini ) ) )
              );
  #
    $INI -> Import(
                    -loadsection  => [ qw( GLOBAL VERZEICHNISSE ) ],
                    -loadvariable => [ qw( USER::Name+TempDir VAR::Datum+Ort ) ],
                    -protocol     => $FH                           ,
                    -exportto     => 'Cfg'
                  );
  #
    print "$Cfg::USER_Name\n";   # print = Name des Users
    print "$Cfg::VAR_Datum\n";   # print = Monatsname.Jahr in deutsch
    print "$Cfg::VAR_Ort\n";     # print = Berlin
  #
  ###############################################################################

=head1 FEHLERMELDUNGEN

=over 7

=item B<Can't substitute value by sektion_schluessel>

=back

Bei einer Substitution wird auf eine nicht definierte Kombination aus Sektion und Schluessel
zugegriffen, oder es wird eine nicht existente predifinierte Variable angesprochen.

Das Skript wird in diesem Fall mit einer entsprechenden Fehlermeldung abgebrochen!

=over 7

=item B<Can't create variable package::sektion_schluessel>

=back

Die Angegeben Variable konnte nicht erzeugt werden.

Das Skript wird in diesem Fall mit einer entsprechenden Fehlermeldung abgebrochen!

=over 7

=item B<Error by predifinition : $type : $key = $value\n>

=back

Die Definition einer privaten 'predefinierten Variablen' ist falsch.

Das Skript wird in diesem Fall mit einer entsprechenden Fehlermeldung abgebrochen!

=head1 PRAGMAS

strict

vars

=head1 MODULE

Carp

Date::Language

FindBin

Config::IniFiles   Version : 2.29 ( oder neuer )

Bei dem Einsatz unter Windoofs ist folgender Patch in dem Modul 'Config::IniFiles'
vorzunehmen:

  - Im Unterprogramm 'ReadConfig' ist die Anweisung wie folgt zu aendern:
    - von: 'while($self->{allowcontinue} && $val =~ s/\\$//) {'
    - in : 'while($self->{allowcontinue} && $val =~ s/\s\\$//) {'

=head1 VERSIONEN

0.100 - 22.09.2002 - JvB

        Erste Test- und Entwicklungsversion

0.200 - 22.09.2002 - JvB

        Mit der Option '-loadsection', der Import-Methode, ist es moeglich ausgewaehlte Sektione zu
        importieren.

0.210 - 23.09.2002 - JvB

        Ueberarbeitung der Dokumentation und Straffung des Codes

0.300 - 23.09.2002 - JvB

        Mit der Option '-protocol' besteht die Moeglichkeit den Variablenimport zu Protokollieren.

0.301 - 24.09.2002 - JvB

        Fehlerkorrektur:
        - Wurde die Option '-loadsection' nicht angegeben, wurden der Variablenimport nicht
          durchgefuehrt.

0.400 - 14.05.2003 - JvB

        Veraenderung des Importes der INI-Daten.
        - Die Namen der Variablen werden nach einem neuen Verfahren gebildet.
        - Das Package, in das der Import der Variablen erfolgt ist waehlbar.

0.500 - 14.05.2003 - JvB

        Erweiterung fuer die Verarbeitung predefinierter Variablen.
        - FindBin, UserName

0.600 - 15.05.2003 - JvB

        Erweiterung fuer den Import einzelner Parameter einer Sektion.
        - Mit der Option '-loadvariable' koennen nur einzelne Parameter einer Sektion uebernommen
          werden.

0.700 - 15.05.2003 - JvB

        Weitere predefinierte Variable hinzugefuegt.
        - TimeShort, TimeLong, DateShort, DateLong, DateTime
        Veraenderung des optionalen Protokolldrucks.

0.701 - 13.06.2003 - JvB

        - Korrektur der Dokumentation

0.800 - 13.06.2003 - JvB

        - Erweiterung fuer frei definierbare 'predefinierte Variable'

0.900 - 18.06.2003 - JvB

        - Erweiterung fuer mehrere Substitutionen in einer Zeile
        - Verbesserung der Dokumentation
        - Dokumentation ( POD ) ist eine eigenstaendige Datei

=head1 AUTOREN

JvB  -  Juergen von Brietzke
     -  juergen.von.brietzke@t-online.de

=head1 COPYRIGHT

Copyright (c) 2002, 2003 by JvB.

Dieses Modul ist freie Software.
Die Benutzung und / oder Veraenderung unterliegt der selben Lizenz wie Perl.

=cut

# ###################################################################################################
# #                                             E N D E                                             #
# ###################################################################################################
1;
